Day 1
- document.querySelector() return first element that matches the CSS selector used as an arg
- document.querySelectorAll() returns all elements that match the CSS selector used
- Audio functions eg play, pause, etc
- Each key has a keyCode eg A = 65
- Add/remove classes with Element.classList.add()/remove()
- prototype in console shows properties and methods available to parent object eg Array.prototype has filter, map, reduce, etc

Day 2
- Inline styles with Element.style.PROPERTY
- Elements transform at center by default
- Setting Element.style.PROPERTY = '' resets styling

Day 3
- CSS variables are declared '--VAR_NAME: VALUE'
- CSS variables are used CSS_PROPERTY: var(--VAR_NAME)
- querySelector returns a node list NOT an array. Node list has much fewer methods available(viewable in prototype)
- object.dataset returns an object containing all the data attributes on the object it was called on
- document.documentElement returns the root element of the documentElement

Day 4
- ARRAY.filter() takes a function that takes in each item in the array and checks it against a condition to see if it should stay or be filtered out
- filter only needs a boolean value to know whether a value should remain or be filtered out.
- console.table() returns formatted table showing array contents
- ARRAY.map() takes an array of size n, performs whatever function you want to each value and return an array of size n
- ARRAY.sort() sorts an array based on a comparison set by user. If no sorting function is provided the array is sorted on unicode values
Has 2 params which correspond to subsequent elements in the array.
- ARRAY.reduce() keeps a running total for each element in an array. You choose what value to add and it sums them and returns the total.
You can specify a starting value
- You can destruct a split string to skip having to assign the parts separately eg const [part1, part2] = string.split(',')
- ARRAY.reduce() can be used to tally totals for different keys in an object. It does not have to return a single number.

Day 5
- Set display: flex to make container a flex container
- set child of flex container to flex: 1 to make those take up equal amounts of space. 1:1 ratio for each of those children
- 'justify-content' aligns content on main axis
- 'align-items' aligns content on the axis perpendicular to the main axis
- 'flex-direction' specifies direction of the container. defaults to grow
- 'flex' is shorthand for flex-grow(proportion of extra space allotted) | flex-shrink(amount to shrink if too little space) | flex-basis(initial size before space is allotted)
- Adding '()' to a function name in 'addEventListener' would cause the function to run on page load. We use function name without '()' to pass it a reference
so it knows which function to use on event action

Day 6
- fetch() gets resources from provided path and returns a promise.
- To use data retrieved using fetch() you have to use .then() and you can manipulate it within the .then(). Pass it outside to use it outside of .then()
- You can use a regex on a variable with new RegExp(VAR_NAME, RULES)
- You can change a returned array to a string by adding .join('')

Day 7
- ARRAY.some() takes in a function to check that at least one item fits the criteria
- ARRAY.every() takes in a function and checks that all items in the array fit criteria
- Putting a logged variable in '{}' you can see the name and value (cause its an object...kinda convenient)
- ARRAY.find() is like filter but only returns the first match
- ARRAY.findIndex() returns index of first matched item
- ARRAY.splice() takes 1-3 args and adds/removes items from array. Start index, num items to delete(opt), items to add(can be >= 1)(opt)
- ARRAY.slice() has 1-2 args. a start index (inclusive) and end index(exclusive). If no end index is specified it goes to end of array
